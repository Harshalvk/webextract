generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Workflow {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  definition  String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  executions WorkflowExecution[]

  //user cannot have two workflows with the same name
  @@unique([name, userId])
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflowId  String
  userId      String
  trigger     String
  status      String
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?

  phases   ExecutionPhase[]
  workflow Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id          String    @id @default(cuid())
  userId      String
  status      String
  number      Int
  node        String
  name        String
  started     DateTime?
  completedAt DateTime?
  inputs      String?
  output      String?

  creditsConsumed  Int?

  workflowExecutionId String
  execution           WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
}
